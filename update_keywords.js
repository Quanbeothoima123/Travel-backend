require("dotenv").config();
const mongoose = require("mongoose");
const Airport = require("./api/v1/models/airport.model.js");

async function updateKeywords() {
  try {
    console.log("üîÑ ƒêang k·∫øt n·ªëi MongoDB...");
    await mongoose.connect(process.env.MONGO_URL);
    console.log("‚úÖ ƒê√£ k·∫øt n·ªëi MongoDB!");

    console.log("üîÑ ƒêang l·∫•y danh s√°ch s√¢n bay...");
    const airports = await Airport.find({});
    console.log(`üìä T√¨m th·∫•y ${airports.length} s√¢n bay`);

    console.log("üîÑ ƒêang c·∫≠p nh·∫≠t keywords...");
    let updated = 0;

    for (const airport of airports) {
      airport.keywords = airport.generateKeywords();
      await airport.save();
      updated++;

      // Hi·ªÉn th·ªã ti·∫øn tr√¨nh
      if (updated % 100 === 0) {
        console.log(`   ‚è≥ ƒê√£ c·∫≠p nh·∫≠t ${updated}/${airports.length}...`);
      }
    }

    console.log(`‚úÖ Ho√†n th√†nh! ƒê√£ c·∫≠p nh·∫≠t ${updated} s√¢n bay`);
    console.log("\nüìã V√≠ d·ª• keywords:");
    const sample = airports.slice(0, 3);
    sample.forEach((a) => {
      console.log(`   ${a.iataCode || a.icaoCode} - ${a.name}`);
      console.log(`   Keywords: ${a.keywords.join(", ")}\n`);
    });

    process.exit(0);
  } catch (error) {
    console.error("‚ùå L·ªói:", error.message);
    process.exit(1);
  }
}

updateKeywords();
