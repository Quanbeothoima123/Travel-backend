const mongoose = require("mongoose");

const ShortSchema = new mongoose.Schema(
  {
    title: {
      type: String,
      required: true,
      trim: true,
    },
    slug: {
      type: String,
      required: true,
      unique: true,
      trim: true,
    },
    description: {
      type: String,
      maxlength: 500, // m√¥ t·∫£ ng·∫Øn g·ªçn
    },
    videoUrl: {
      type: String,
      required: false, // ‚Üê S·ª≠a th√†nh false
      default: "", // Cho ph√©p r·ªóng khi ƒëang x·ª≠ l√Ω
    },
    createdBy: {
      type: mongoose.Schema.Types.ObjectId,
      refPath: "createdByType", // tham chi·∫øu ƒë·ªông
    },
    createdByType: {
      type: String,
      enum: ["User", "AdminAccount"], // ph√¢n bi·ªát user hay admin
      default: "User",
    },
    province: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "Province",
    },
    ward: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "Ward",
    },
    placeName: {
      type: String, // t√™n ƒë·ªãa ƒëi·ªÉm c·ª• th·ªÉ
      trim: true,
    },
    googleMap: {
      type: String, // link Google Maps (c√≥ th·ªÉ ch·ª©a t·ªça ƒë·ªô ho·∫∑c share link)
      trim: true,
    },
    tags: [
      {
        type: String, // c√≥ th·ªÉ n√¢ng c·∫•p sau th√†nh ref ri√™ng
        trim: true,
      },
    ],

    // üìä Th·ªëng k√™
    views: {
      type: Number,
      default: 0,
    },
    likes: {
      type: Number,
      default: 0,
    },
    shares: {
      type: Number,
      default: 0,
    },

    status: {
      type: String,
      enum: ["active", "inactive", "deleted"],
      default: "inactive", // M·∫∑c ƒë·ªãnh inactive khi ƒëang x·ª≠ l√Ω
    },
    deletedAt: Date,
  },
  {
    timestamps: true, // t·ª± ƒë·ªông c√≥ createdAt, updatedAt
  }
);

const Short = mongoose.model("Short", ShortSchema, "shorts");
module.exports = Short;
