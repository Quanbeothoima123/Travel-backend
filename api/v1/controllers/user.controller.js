const md5 = require("md5");
const User = require("../models/user.model");
const Otp = require("../models/otp.model"); // nhá»› import Otp
const sendOtp = require("../../../helpers/otpGenerator");

// [POST] /api/v1/user/register
module.exports.register = async (req, res) => {
  try {
    const user = {
      fullName: req.body.fullName,
      email: req.body.email,
      password: md5(req.body.password),
    };

    const userSave = new User(user);
    await userSave.save();

    const subject = "MÃ£ xÃ¡c thá»±c Ä‘Äƒng kÃ½ tÃ i khoáº£n";
    await sendOtp.generateAndSendOtp(userSave.id, subject, req.body.email);

    return res.json({
      code: 200,
      message: "Vui lÃ²ng nháº­p mÃ£ xÃ¡c thá»±c Ä‘á»ƒ hoÃ n táº¥t Ä‘Äƒng kÃ­ tÃ i khoáº£n",
      userId: userSave.id,
      email: req.body.email,
      type: "register", // ðŸ‘ˆ ThÃªm type Ä‘á»ƒ phÃ¢n biá»‡t
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "Server error" });
  }
};

// [POST] /api/v1/user/auth
module.exports.auth = async (req, res) => {
  try {
    const { userId, otp, type } = req.body;

    const otpRecord = await Otp.findOne({ userId }).select("code expireAt");

    if (!otpRecord) {
      return res
        .status(400)
        .json({ message: "OTP khÃ´ng tá»“n táº¡i hoáº·c Ä‘Ã£ háº¿t háº¡n", type });
    }

    if (otpRecord.expireAt < new Date()) {
      return res.status(400).json({ message: "MÃ£ OTP Ä‘Ã£ háº¿t háº¡n", type });
    }

    if (otpRecord.code !== otp) {
      return res.status(400).json({ message: "MÃ£ OTP khÃ´ng chÃ­nh xÃ¡c", type });
    }

    // Náº¿u OTP Ä‘Ãºng, cáº­p nháº­t user thÃ nh active
    await User.updateOne({ _id: userId }, { status: "active" });

    // XoÃ¡ OTP Ä‘Ã£ dÃ¹ng
    await Otp.deleteMany({ userId });

    return res.json({
      code: 200,
      message: "XÃ¡c thá»±c thÃ nh cÃ´ng",
      userId,
      type, // ðŸ‘ˆ Giá»¯ láº¡i type Ä‘á»ƒ frontend biáº¿t Ä‘ang xá»­ lÃ½ gÃ¬
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "Lá»—i server" });
  }
};

// [POST] /api/v1/user/resendOtp
module.exports.resendOtp = async (req, res) => {
  try {
    const { userId, email, type } = req.body;

    if (!userId || !email) {
      return res.status(400).json({
        message: "Thiáº¿u thÃ´ng tin userId hoáº·c email",
        type,
      });
    }

    // XÃ³a OTP cÅ©
    await Otp.deleteMany({ userId });

    // Gá»­i OTP má»›i
    const subject =
      type === "register"
        ? "MÃ£ xÃ¡c thá»±c Ä‘Äƒng kÃ½ tÃ i khoáº£n (gá»­i láº¡i)"
        : "MÃ£ OTP xÃ¡c thá»±c (gá»­i láº¡i)";
    await sendOtp.generateAndSendOtp(userId, subject, email);

    return res.json({
      code: 200,
      message: "OTP má»›i Ä‘Ã£ Ä‘Æ°á»£c gá»­i, vui lÃ²ng kiá»ƒm tra email",
      userId,
      email,
      type, // ðŸ‘ˆ frontend nháº­n Ä‘á»ƒ biáº¿t resend cho flow nÃ o
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "Lá»—i server" });
  }
};
