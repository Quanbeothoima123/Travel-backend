const md5 = require("md5");
const User = require("../../models/user.model");
const Otp = require("../../models/otp.model"); // nh·ªõ import Otp
const Ward = require("../../models/ward.model");
const Province = require("../../models/province.model");
const sendOtp = require("../../../../helpers/otpGenerator");
const jwt = require("jsonwebtoken");
const JWT_SECRET = process.env.JWT_SECRET;
// [POST] /api/v1/user/register
module.exports.register = async (req, res) => {
  try {
    const email = req.body.email;
    const emailExist = await User.findOne({ email: email });

    if (emailExist) {
      return res.json({
        code: 400,
        message:
          "T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒëƒÉng k√≠!, N·∫øu ch∆∞a x√°c th·ª±c h√£y b·∫•m n√∫t x√°c th·ª±c t√†i kho·∫£n ph√≠a d∆∞·ªõi!",
        userId: "",
        email: req.body.email,
        type: "register", // üëà Th√™m type ƒë·ªÉ ph√¢n bi·ªát
      });
    }
    const user = {
      fullName: req.body.fullName,
      email: req.body.email,
      password: md5(req.body.password),
    };
    const userSave = new User(user);
    await userSave.save();

    const subject = "M√£ x√°c th·ª±c ƒëƒÉng k√Ω t√†i kho·∫£n";
    await sendOtp.generateAndSendOtp(userSave.id, subject, req.body.email);

    return res.json({
      code: 200,
      message: "Vui l√≤ng nh·∫≠p m√£ x√°c th·ª±c ƒë·ªÉ ho√†n t·∫•t ƒëƒÉng k√≠ t√†i kho·∫£n",
      userId: userSave.id,
      email: req.body.email,
      type: "register", // üëà Th√™m type ƒë·ªÉ ph√¢n bi·ªát
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "Server error" });
  }
};

// [POST] /api/v1/user/auth
module.exports.auth = async (req, res) => {
  try {
    const { userId, otp, type } = req.body;

    const otpRecord = await Otp.findOne({ userId }).select("code expireAt");

    if (!otpRecord) {
      return res
        .status(400)
        .json({ message: "OTP kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ h·∫øt h·∫°n", type });
    }

    if (otpRecord.expireAt < new Date()) {
      return res.status(400).json({ message: "M√£ OTP ƒë√£ h·∫øt h·∫°n", type });
    }

    if (otpRecord.code !== otp) {
      return res.status(400).json({ message: "M√£ OTP kh√¥ng ch√≠nh x√°c", type });
    }

    // N·∫øu OTP ƒë√∫ng, c·∫≠p nh·∫≠t user th√†nh activer
    await User.updateOne({ _id: userId }, { status: "active" });

    // Xo√° OTP ƒë√£ d√πng
    await Otp.deleteMany({ userId });

    return res.json({
      code: 200,
      message: "X√°c th·ª±c th√†nh c√¥ng",
      userId,
      type, // üëà Gi·ªØ l·∫°i type ƒë·ªÉ frontend bi·∫øt ƒëang x·ª≠ l√Ω g√¨
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "L·ªói server" });
  }
};

// [POST] /api/v1/user/resendOtp
module.exports.resendOtp = async (req, res) => {
  try {
    const { userId, email, type } = req.body;

    if (!userId || !email) {
      return res.status(400).json({
        message: "Thi·∫øu th√¥ng tin userId ho·∫∑c email",
        type,
      });
    }

    // X√≥a OTP c≈©
    await Otp.deleteMany({ userId });

    // G·ª≠i OTP m·ªõi
    const subject =
      type === "register"
        ? "M√£ x√°c th·ª±c ƒëƒÉng k√Ω t√†i kho·∫£n (g·ª≠i l·∫°i)"
        : "M√£ OTP x√°c th·ª±c (g·ª≠i l·∫°i)";
    await sendOtp.generateAndSendOtp(userId, subject, email);

    return res.json({
      code: 200,
      message: "OTP m·ªõi ƒë√£ ƒë∆∞·ª£c g·ª≠i, vui l√≤ng ki·ªÉm tra email",
      userId,
      email,
      type, // üëà frontend nh·∫≠n ƒë·ªÉ bi·∫øt resend cho flow n√†o
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "L·ªói server" });
  }
};

// [POST] /api/v1/user/reAuth
module.exports.reAuth = async (req, res) => {
  try {
    const { email } = req.body;
    if (!email) {
      return res.status(400).json({ message: "Thi·∫øu email" });
    }

    const user = await User.findOne({ email });
    if (!user) {
      return res.status(404).json({ message: "Email kh√¥ng t·ªìn t·∫°i" });
    }
    if (user.status === "active") {
      return res.status(404).json({
        message: "T√†i kho·∫£n ƒë√£ x√°c th·ª±c vui l√≤ng kh√¥ng l·∫£ng v·∫£ng ·ªü ƒë√¢y!",
      });
    }

    // X√≥a OTP c≈©
    await Otp.deleteMany({ userId: user._id });

    // G·ª≠i l·∫°i OTP m·ªõi
    const subject = "M√£ x√°c th·ª±c l·∫°i t√†i kho·∫£n";
    await sendOtp.generateAndSendOtp(user._id, subject, email);

    return res.json({
      code: 200,
      message: "OTP m·ªõi ƒë√£ ƒë∆∞·ª£c g·ª≠i, vui l√≤ng ki·ªÉm tra email",
      userId: user._id,
      email,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "L·ªói server" });
  }
};

// [POST] /api/v1/user/reInfo
module.exports.reInfo = async (req, res) => {
  try {
    const { userId, fullName, password } = req.body;

    if (!userId || !fullName || !password) {
      return res.status(400).json({ message: "Thi·∫øu th√¥ng tin" });
    }

    // Hash password m·ªõi
    const hashPass = md5(password);

    // Update user info
    await User.findByIdAndUpdate(userId, {
      fullName,
      password: hashPass,
      status: "active",
    });

    return res.json({
      code: 200,
      message: "C·∫≠p nh·∫≠t th√¥ng tin & x√°c th·ª±c th√†nh c√¥ng",
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "L·ªói server" });
  }
};

// [POST] /api/v1/user/login
module.exports.login = async (req, res) => {
  try {
    const { email, password } = req.body;
    const user = await User.findOne({ email }).select("password fullName");

    if (!user || md5(password) !== user.password) {
      return res.json({
        code: 400,
        message: "Sai m·∫≠t kh·∫©u ho·∫∑c t√†i kho·∫£n",
      });
    }

    // T·∫°o JWT
    const token = jwt.sign(
      { userId: user._id, fullName: user.fullName },
      JWT_SECRET,
      { expiresIn: "7d" } // token s·ªëng 7 ng√†y
    );

    // Set cookie (httpOnly ƒë·ªÉ b·∫£o m·∫≠t h∆°n)
    res.cookie("authToken", token, {
      httpOnly: true,
      secure: false, // true n·∫øu d√πng HTTPS
      maxAge: 7 * 24 * 60 * 60 * 1000,
    });

    return res.json({
      code: 200,
      message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng",
      token,
      fullName: user.fullName,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "L·ªói server" });
  }
};
// [GET] /api/v1/user/me
module.exports.getMe = async (req, res) => {
  try {
    const user = await User.findById(req.user.userId).select(
      "fullName email avatar"
    );
    res.json(user);
  } catch (err) {
    res.status(500).json({ message: "L·ªói server" });
  }
};

module.exports.logout = (req, res) => {
  res.clearCookie("authToken");
  return res.json({ message: "ƒêƒÉng xu·∫•t th√†nh c√¥ng" });
};
// [GET] /api/v1/user/user-profile
module.exports.getUserProfile = async (req, res) => {
  try {
    const userId = req.user.userId; // t·ª´ token decode
    const user = await User.findById(userId)
      .populate("province")
      .populate("ward")
      .lean();

    if (!user) {
      return res
        .status(404)
        .json({ message: "C√≥ l·ªói trong qu√° tr√¨nh l·∫•y th√¥ng tin" });
    }
    const { password, ...rest } = user;
    res.json(rest);
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "L·ªói server" });
  }
};

// [POST] /api/v1/user/update-profile
module.exports.updateUserProfile = async (req, res) => {
  try {
    const userId = req.user.userId;
    const {
      fullName,
      birthDay,
      sex,
      phone,
      avatar,
      address,
      province, // Object: {code, name, _id, ...}
      ward, // Object: {code, name, _id, ...}
    } = req.body;

    const user = await User.findById(userId);
    if (!user)
      return res.status(404).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" });

    // C·∫≠p nh·∫≠t c√°c field c∆° b·∫£n
    if (fullName !== undefined) user.fullName = fullName;
    if (birthDay !== undefined) user.birthDay = new Date(birthDay);
    if (sex !== undefined) user.sex = sex;
    if (phone !== undefined) user.phone = phone;
    if (avatar !== undefined) user.avatar = avatar;
    if (address !== undefined) user.address = address;

    // X·ª≠ l√Ω province - nh·∫≠n object t·ª´ frontend
    if (province && province._id) {
      const provinceDoc = await Province.findById(province._id);
      if (!provinceDoc)
        return res.status(400).json({ message: "T·ªânh/Th√†nh kh√¥ng h·ª£p l·ªá" });
      user.province = provinceDoc._id;

      // Reset ward khi ƒë·ªïi province
      if (!ward || ward.parent_code !== provinceDoc.code) {
        user.ward = undefined;
      }
    }

    // X·ª≠ l√Ω ward - nh·∫≠n object t·ª´ frontend
    if (ward && ward._id && user.province) {
      const wardDoc = await Ward.findById(ward._id);
      if (!wardDoc)
        return res.status(400).json({ message: "Ph∆∞·ªùng/X√£ kh√¥ng h·ª£p l·ªá" });

      // Ki·ªÉm tra ward c√≥ thu·ªôc province kh√¥ng
      const provinceDoc = await Province.findById(user.province);
      if (wardDoc.parent_code !== provinceDoc.code)
        return res.status(400).json({
          message: "Ph∆∞·ªùng/X√£ kh√¥ng thu·ªôc t·ªânh/th√†nh ƒë√£ ch·ªçn",
        });

      user.ward = wardDoc._id;
    }

    await user.save();

    // Populate ƒë·ªÉ tr·∫£ v·ªÅ full data nh∆∞ GET API
    const updatedUser = await User.findById(userId)
      .populate("province")
      .populate("ward")
      .select("-password");

    // QUAN TR·ªåNG: Tr·∫£ v·ªÅ user object tr·ª±c ti·∫øp
    res.json(updatedUser);
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "L·ªói server" });
  }
};
